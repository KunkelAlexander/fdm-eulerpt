from numba import njit 
import constants as c 
import numpy as np
from special_functions import k_norm

#Mode coupling functions
@njit(cache = True)
def alpha(k_1, k_2):
    k1s = np.dot(k_1, k_1)
    #Need this check for case x/x where x == 0 and expression should vanish
    if k1s < c.EPS:
      #raise ValueError
      return 0
    return np.dot(k_1 + k_2, k_1)/k1s

@njit(cache = True)
def beta(k_1, k_2):
    k1s = np.dot(k_1, k_1)
    k2s = np.dot(k_2, k_2)
    if k1s < c.EPS or k2s < c.EPS:
      return 0
    return np.dot(k_1 + k_2, k_1 + k_2)*np.dot(k_1, k_2)/(2*k1s*k2s)

#Cartesian F2-kernel
@njit(cache = True)
def F2(k_1, k_2, eta):
    k1 = k_norm(k_1)
    k2 = k_norm(k_2)
    return 5/7 + 1/2 * np.dot(k_1, k_2) / (k1*k2) * (k1/k2 + k2/k1) + 2/7 * np.dot(k_1, k_2)**2 / (k1**2*k2**2)

#Symmetrised version of cartesian F2-kernel 
@njit(cache = True)
def F2s(k1, k2, *args):
    return 5/14 * (alpha(k1, k2) + alpha(k2, k1)) + 2/7 * beta(k1, k2)

#Time dependent version of cartesian F2-kenerl
@njit(cache = True)
def F2s_td(k1, k2, *args):
    eta, eta0 = args
    return ((25*eta**(7) - 21*eta**(5)*eta0**(2) - 4*eta0**(7))*np.dot(k2,k2)*np.dot(k1 + k2,k1) + (25*eta**(7) - 21*eta**(5)*eta0**(2) - 4*eta0**(7))*np.dot(k1,k1)*np.dot(k1 + k2,k2) + 2*(5*eta**(7) - 7*eta**(5)*eta0**(2) + 2*eta0**(7))*np.dot(k1,k2)*np.dot(k1 + k2,k1 + k2))/(70.*eta**(7)*np.dot(k1,k1)*np.dot(k2,k2))


#Fresh from mathematica :)
@njit(cache = True)
def F3(k1, k2, k3, *args):
  return (7*alpha(k1,k2 + k3)*(5*alpha(k2,k3) + 2*beta(k2,k3)) + 2*beta(k1,k2 + k3)*(3*alpha(k2,k3) + 4*beta(k2,k3)) + (3*alpha(k1,k2) + 4*beta(k1,k2))*(7*alpha(k1 + k2,k3) + 2*beta(k1 + k2,k3)))/126.

#Fresh from mathematica :)
@njit(cache = True)
def F3s(k1, k2, k3, *args):
  return (21*alpha(k1,k2)*alpha(k1 + k2,k3) + 21*alpha(k2,k1)*alpha(k1 + k2,k3) + 35*alpha(k2,k1 + k3)*alpha(k3,k1) + 35*alpha(k1,k2)*alpha(k3,k1 + k2) + 35*alpha(k2,k1)*alpha(k3,k1 + k2) + 21*alpha(k3,k1)*alpha(k1 + k3,k2) + 21*alpha(k2,k3)*alpha(k2 + k3,k1) + 21*alpha(k3,k2)*alpha(k2 + k3,k1) + 56*alpha(k1 + k2,k3)*beta(k1,k2) + 28*alpha(k3,k1 + k2)*beta(k1,k2) + 28*alpha(k2,k1 + k3)*beta(k1,k3) + 56*alpha(k1 + k3,k2)*beta(k1,k3) + 12*alpha(k2,k3)*beta(k1,k2 + k3) + 12*alpha(k3,k2)*beta(k1,k2 + k3) + 56*alpha(k2 + k3,k1)*beta(k2,k3) + 32*beta(k1,k2 + k3)*beta(k2,k3) + 7*alpha(k1,k2 + k3)*(5*alpha(k2,k3) + 5*alpha(k3,k2) + 4*beta(k2,k3)) + 12*alpha(k3,k1)*beta(k2,k1 + k3) + 32*beta(k1,k3)*beta(k2,k1 + k3) + alpha(k1,k3)*(35*alpha(k2,k1 + k3) + 21*alpha(k1 + k3,k2) + 12*beta(k2,k1 + k3)) + 12*alpha(k1,k2)*beta(k1 + k2,k3) + 12*alpha(k2,k1)*beta(k1 + k2,k3) + 32*beta(k1,k2)*beta(k1 + k2,k3))/756.

#Fresh from mathematica :)
@njit(cache = True)
def F4s(k1, k2, k3, k4, *args):
    return (810*alpha(k1,k2)*alpha(k1 + k2,k3 + k4)*alpha(k3,k4) + 810*alpha(k2,k1)*alpha(k1 + k2,k3 + k4)*alpha(k3,k4) + 735*alpha(k1,k4)*alpha(k2,k1 + k3 + k4)*alpha(k3,k1 + k4) + 735*alpha(k1,k2 + k4)*alpha(k2,k4)*alpha(k3,k1 + k2 + k4) + 735*alpha(k1,k4)*alpha(k2,k1 + k4)*alpha(k3,k1 + k2 + k4) + 441*alpha(k1,k2)*alpha(k1 + k2,k4)*alpha(k3,k1 + k2 + k4) + 441*alpha(k2,k1)*alpha(k1 + k2,k4)*alpha(k3,k1 + k2 + k4) + 441*alpha(k1,k3)*alpha(k2,k1 + k3 + k4)*alpha(k1 + k3,k4) + 441*alpha(k2,k1 + k3 + k4)*alpha(k3,k1)*alpha(k1 + k3,k4) + 810*alpha(k1,k3)*alpha(k2,k4)*alpha(k1 + k3,k2 + k4) + 810*alpha(k2,k4)*alpha(k3,k1)*alpha(k1 + k3,k2 + k4) + 810*alpha(k1,k4)*alpha(k2,k3)*alpha(k2 + k3,k1 + k4) + 810*alpha(k1,k4)*alpha(k3,k2)*alpha(k2 + k3,k1 + k4) + 315*alpha(k1,k2 + k3)*alpha(k2,k3)*alpha(k1 + k2 + k3,k4) + 315*alpha(k1,k3)*alpha(k2,k1 + k3)*alpha(k1 + k2 + k3,k4) + 189*alpha(k1,k2)*alpha(k1 + k2,k3)*alpha(k1 + k2 + k3,k4) + 189*alpha(k2,k1)*alpha(k1 + k2,k3)*alpha(k1 + k2 + k3,k4) + 315*alpha(k2,k1 + k3)*alpha(k3,k1)*alpha(k1 + k2 + k3,k4) + 315*alpha(k1,k2 + k3)*alpha(k3,k2)*alpha(k1 + k2 + k3,k4) + 315*alpha(k1,k2)*alpha(k3,k1 + k2)*alpha(k1 + k2 + k3,k4) + 315*alpha(k2,k1)*alpha(k3,k1 + k2)*alpha(k1 + k2 + k3,k4) + 189*alpha(k1,k3)*alpha(k1 + k3,k2)*alpha(k1 + k2 + k3,k4) + 189*alpha(k3,k1)*alpha(k1 + k3,k2)*alpha(k1 + k2 + k3,k4) + 189*alpha(k2,k3)*alpha(k2 + k3,k1)*alpha(k1 + k2 + k3,k4) + 189*alpha(k3,k2)*alpha(k2 + k3,k1)*alpha(k1 + k2 + k3,k4) + 735*alpha(k2,k1 + k3 + k4)*alpha(k3,k1 + k4)*alpha(k4,k1) + 735*alpha(k2,k1 + k4)*alpha(k3,k1 + k2 + k4)*alpha(k4,k1) + 810*alpha(k2,k3)*alpha(k2 + k3,k1 + k4)*alpha(k4,k1) + 810*alpha(k3,k2)*alpha(k2 + k3,k1 + k4)*alpha(k4,k1) + 735*alpha(k1,k2 + k4)*alpha(k3,k1 + k2 + k4)*alpha(k4,k2) + 810*alpha(k1,k3)*alpha(k1 + k3,k2 + k4)*alpha(k4,k2) + 810*alpha(k3,k1)*alpha(k1 + k3,k2 + k4)*alpha(k4,k2) + 735*alpha(k1,k2)*alpha(k3,k1 + k2 + k4)*alpha(k4,k1 + k2) + 735*alpha(k2,k1)*alpha(k3,k1 + k2 + k4)*alpha(k4,k1 + k2) + 810*alpha(k1,k2)*alpha(k1 + k2,k3 + k4)*alpha(k4,k3) + 810*alpha(k2,k1)*alpha(k1 + k2,k3 + k4)*alpha(k4,k3) + 735*alpha(k1,k3)*alpha(k2,k1 + k3 + k4)*alpha(k4,k1 + k3) + 735*alpha(k2,k1 + k3 + k4)*alpha(k3,k1)*alpha(k4,k1 + k3) + 735*alpha(k1,k2 + k3)*alpha(k2,k3)*alpha(k4,k1 + k2 + k3) + 735*alpha(k1,k3)*alpha(k2,k1 + k3)*alpha(k4,k1 + k2 + k3) + 441*alpha(k1,k2)*alpha(k1 + k2,k3)*alpha(k4,k1 + k2 + k3) + 441*alpha(k2,k1)*alpha(k1 + k2,k3)*alpha(k4,k1 + k2 + k3) + 735*alpha(k2,k1 + k3)*alpha(k3,k1)*alpha(k4,k1 + k2 + k3) + 735*alpha(k1,k2 + k3)*alpha(k3,k2)*alpha(k4,k1 + k2 + k3) + 735*alpha(k1,k2)*alpha(k3,k1 + k2)*alpha(k4,k1 + k2 + k3) + 735*alpha(k2,k1)*alpha(k3,k1 + k2)*alpha(k4,k1 + k2 + k3) + 441*alpha(k1,k3)*alpha(k1 + k3,k2)*alpha(k4,k1 + k2 + k3) + 441*alpha(k3,k1)*alpha(k1 + k3,k2)*alpha(k4,k1 + k2 + k3) + 441*alpha(k2,k3)*alpha(k2 + k3,k1)*alpha(k4,k1 + k2 + k3) + 441*alpha(k3,k2)*alpha(k2 + k3,k1)*alpha(k4,k1 + k2 + k3) + 441*alpha(k1,k4)*alpha(k3,k1 + k2 + k4)*alpha(k1 + k4,k2) + 441*alpha(k3,k1 + k2 + k4)*alpha(k4,k1)*alpha(k1 + k4,k2) + 441*alpha(k1,k4)*alpha(k2,k1 + k3 + k4)*alpha(k1 + k4,k3) + 441*alpha(k2,k1 + k3 + k4)*alpha(k4,k1)*alpha(k1 + k4,k3) + 810*alpha(k1,k4)*alpha(k2,k3)*alpha(k1 + k4,k2 + k3) + 810*alpha(k1,k4)*alpha(k3,k2)*alpha(k1 + k4,k2 + k3) + 810*alpha(k2,k3)*alpha(k4,k1)*alpha(k1 + k4,k2 + k3) + 810*alpha(k3,k2)*alpha(k4,k1)*alpha(k1 + k4,k2 + k3) + 441*alpha(k2,k4)*alpha(k3,k1 + k2 + k4)*alpha(k2 + k4,k1) + 441*alpha(k3,k1 + k2 + k4)*alpha(k4,k2)*alpha(k2 + k4,k1) + 810*alpha(k1,k3)*alpha(k2,k4)*alpha(k2 + k4,k1 + k3) + 810*alpha(k2,k4)*alpha(k3,k1)*alpha(k2 + k4,k1 + k3) + 810*alpha(k1,k3)*alpha(k4,k2)*alpha(k2 + k4,k1 + k3) + 810*alpha(k3,k1)*alpha(k4,k2)*alpha(k2 + k4,k1 + k3) + 315*alpha(k1,k2 + k4)*alpha(k2,k4)*alpha(k1 + k2 + k4,k3) + 315*alpha(k1,k4)*alpha(k2,k1 + k4)*alpha(k1 + k2 + k4,k3) + 189*alpha(k1,k2)*alpha(k1 + k2,k4)*alpha(k1 + k2 + k4,k3) + 189*alpha(k2,k1)*alpha(k1 + k2,k4)*alpha(k1 + k2 + k4,k3) + 315*alpha(k2,k1 + k4)*alpha(k4,k1)*alpha(k1 + k2 + k4,k3) + 315*alpha(k1,k2 + k4)*alpha(k4,k2)*alpha(k1 + k2 + k4,k3) + 315*alpha(k1,k2)*alpha(k4,k1 + k2)*alpha(k1 + k2 + k4,k3) + 315*alpha(k2,k1)*alpha(k4,k1 + k2)*alpha(k1 + k2 + k4,k3) + 189*alpha(k1,k4)*alpha(k1 + k4,k2)*alpha(k1 + k2 + k4,k3) + 189*alpha(k4,k1)*alpha(k1 + k4,k2)*alpha(k1 + k2 + k4,k3) + 189*alpha(k2,k4)*alpha(k2 + k4,k1)*alpha(k1 + k2 + k4,k3) + 189*alpha(k4,k2)*alpha(k2 + k4,k1)*alpha(k1 + k2 + k4,k3) + 441*alpha(k2,k1 + k3 + k4)*alpha(k3,k4)*alpha(k3 + k4,k1) + 441*alpha(k2,k1 + k3 + k4)*alpha(k4,k3)*alpha(k3 + k4,k1) + 810*alpha(k1,k2)*alpha(k3,k4)*alpha(k3 + k4,k1 + k2) + 810*alpha(k2,k1)*alpha(k3,k4)*alpha(k3 + k4,k1 + k2) + 810*alpha(k1,k2)*alpha(k4,k3)*alpha(k3 + k4,k1 + k2) + 810*alpha(k2,k1)*alpha(k4,k3)*alpha(k3 + k4,k1 + k2) + 315*alpha(k1,k4)*alpha(k3,k1 + k4)*alpha(k1 + k3 + k4,k2) + 189*alpha(k1,k3)*alpha(k1 + k3,k4)*alpha(k1 + k3 + k4,k2) + 189*alpha(k3,k1)*alpha(k1 + k3,k4)*alpha(k1 + k3 + k4,k2) + 315*alpha(k3,k1 + k4)*alpha(k4,k1)*alpha(k1 + k3 + k4,k2) + 315*alpha(k1,k3)*alpha(k4,k1 + k3)*alpha(k1 + k3 + k4,k2) + 315*alpha(k3,k1)*alpha(k4,k1 + k3)*alpha(k1 + k3 + k4,k2) + 189*alpha(k1,k4)*alpha(k1 + k4,k3)*alpha(k1 + k3 + k4,k2) + 189*alpha(k4,k1)*alpha(k1 + k4,k3)*alpha(k1 + k3 + k4,k2) + 189*alpha(k3,k4)*alpha(k3 + k4,k1)*alpha(k1 + k3 + k4,k2) + 189*alpha(k4,k3)*alpha(k3 + k4,k1)*alpha(k1 + k3 + k4,k2) + 315*alpha(k2,k3 + k4)*alpha(k3,k4)*alpha(k2 + k3 + k4,k1) + 315*alpha(k2,k4)*alpha(k3,k2 + k4)*alpha(k2 + k3 + k4,k1) + 189*alpha(k2,k3)*alpha(k2 + k3,k4)*alpha(k2 + k3 + k4,k1) + 189*alpha(k3,k2)*alpha(k2 + k3,k4)*alpha(k2 + k3 + k4,k1) + 315*alpha(k3,k2 + k4)*alpha(k4,k2)*alpha(k2 + k3 + k4,k1) + 315*alpha(k2,k3 + k4)*alpha(k4,k3)*alpha(k2 + k3 + k4,k1) + 315*alpha(k2,k3)*alpha(k4,k2 + k3)*alpha(k2 + k3 + k4,k1) + 315*alpha(k3,k2)*alpha(k4,k2 + k3)*alpha(k2 + k3 + k4,k1) + 189*alpha(k2,k4)*alpha(k2 + k4,k3)*alpha(k2 + k3 + k4,k1) + 189*alpha(k4,k2)*alpha(k2 + k4,k3)*alpha(k2 + k3 + k4,k1) + 189*alpha(k3,k4)*alpha(k3 + k4,k2)*alpha(k2 + k3 + k4,k1) + 189*alpha(k4,k3)*alpha(k3 + k4,k2)*alpha(k2 + k3 + k4,k1) + 2160*alpha(k1 + k2,k3 + k4)*alpha(k3,k4)*beta(k1,k2) + 1176*alpha(k1 + k2,k4)*alpha(k3,k1 + k2 + k4)*beta(k1,k2) + 504*alpha(k1 + k2,k3)*alpha(k1 + k2 + k3,k4)*beta(k1,k2) + 252*alpha(k3,k1 + k2)*alpha(k1 + k2 + k3,k4)*beta(k1,k2) + 588*alpha(k3,k1 + k2 + k4)*alpha(k4,k1 + k2)*beta(k1,k2) + 2160*alpha(k1 + k2,k3 + k4)*alpha(k4,k3)*beta(k1,k2) + 1176*alpha(k1 + k2,k3)*alpha(k4,k1 + k2 + k3)*beta(k1,k2) + 588*alpha(k3,k1 + k2)*alpha(k4,k1 + k2 + k3)*beta(k1,k2) + 504*alpha(k1 + k2,k4)*alpha(k1 + k2 + k4,k3)*beta(k1,k2) + 252*alpha(k4,k1 + k2)*alpha(k1 + k2 + k4,k3)*beta(k1,k2) + 648*alpha(k3,k4)*alpha(k3 + k4,k1 + k2)*beta(k1,k2) + 648*alpha(k4,k3)*alpha(k3 + k4,k1 + k2)*beta(k1,k2) + 1176*alpha(k2,k1 + k3 + k4)*alpha(k1 + k3,k4)*beta(k1,k3) + 2160*alpha(k2,k4)*alpha(k1 + k3,k2 + k4)*beta(k1,k3) + 252*alpha(k2,k1 + k3)*alpha(k1 + k2 + k3,k4)*beta(k1,k3) + 504*alpha(k1 + k3,k2)*alpha(k1 + k2 + k3,k4)*beta(k1,k3) + 2160*alpha(k1 + k3,k2 + k4)*alpha(k4,k2)*beta(k1,k3) + 588*alpha(k2,k1 + k3 + k4)*alpha(k4,k1 + k3)*beta(k1,k3) + 588*alpha(k2,k1 + k3)*alpha(k4,k1 + k2 + k3)*beta(k1,k3) + 1176*alpha(k1 + k3,k2)*alpha(k4,k1 + k2 + k3)*beta(k1,k3) + 648*alpha(k2,k4)*alpha(k2 + k4,k1 + k3)*beta(k1,k3) + 648*alpha(k4,k2)*alpha(k2 + k4,k1 + k3)*beta(k1,k3) + 504*alpha(k1 + k3,k4)*alpha(k1 + k3 + k4,k2)*beta(k1,k3) + 252*alpha(k4,k1 + k3)*alpha(k1 + k3 + k4,k2)*beta(k1,k3) + 756*alpha(k2,k3)*alpha(k1 + k2 + k3,k4)*beta(k1,k2 + k3) + 756*alpha(k3,k2)*alpha(k1 + k2 + k3,k4)*beta(k1,k2 + k3) + 252*alpha(k2,k3)*alpha(k4,k1 + k2 + k3)*beta(k1,k2 + k3) + 252*alpha(k3,k2)*alpha(k4,k1 + k2 + k3)*beta(k1,k2 + k3) + 588*alpha(k2,k1 + k3 + k4)*alpha(k3,k1 + k4)*beta(k1,k4) + 588*alpha(k2,k1 + k4)*alpha(k3,k1 + k2 + k4)*beta(k1,k4) + 648*alpha(k2,k3)*alpha(k2 + k3,k1 + k4)*beta(k1,k4) + 648*alpha(k3,k2)*alpha(k2 + k3,k1 + k4)*beta(k1,k4) + 1176*alpha(k3,k1 + k2 + k4)*alpha(k1 + k4,k2)*beta(k1,k4) + 1176*alpha(k2,k1 + k3 + k4)*alpha(k1 + k4,k3)*beta(k1,k4) + 2160*alpha(k2,k3)*alpha(k1 + k4,k2 + k3)*beta(k1,k4) + 2160*alpha(k3,k2)*alpha(k1 + k4,k2 + k3)*beta(k1,k4) + 252*alpha(k2,k1 + k4)*alpha(k1 + k2 + k4,k3)*beta(k1,k4) + 504*alpha(k1 + k4,k2)*alpha(k1 + k2 + k4,k3)*beta(k1,k4) + 252*alpha(k3,k1 + k4)*alpha(k1 + k3 + k4,k2)*beta(k1,k4) + 504*alpha(k1 + k4,k3)*alpha(k1 + k3 + k4,k2)*beta(k1,k4) + 252*alpha(k2,k4)*alpha(k3,k1 + k2 + k4)*beta(k1,k2 + k4) + 252*alpha(k3,k1 + k2 + k4)*alpha(k4,k2)*beta(k1,k2 + k4) + 756*alpha(k2,k4)*alpha(k1 + k2 + k4,k3)*beta(k1,k2 + k4) + 756*alpha(k4,k2)*alpha(k1 + k2 + k4,k3)*beta(k1,k2 + k4) + 252*alpha(k2,k1 + k3 + k4)*alpha(k3,k4)*beta(k1,k3 + k4) + 252*alpha(k2,k1 + k3 + k4)*alpha(k4,k3)*beta(k1,k3 + k4) + 756*alpha(k3,k4)*alpha(k1 + k3 + k4,k2)*beta(k1,k3 + k4) + 756*alpha(k4,k3)*alpha(k1 + k3 + k4,k2)*beta(k1,k3 + k4) + 140*alpha(k2,k3 + k4)*alpha(k3,k4)*beta(k1,k2 + k3 + k4) + 140*alpha(k2,k4)*alpha(k3,k2 + k4)*beta(k1,k2 + k3 + k4) + 84*alpha(k2,k3)*alpha(k2 + k3,k4)*beta(k1,k2 + k3 + k4) + 84*alpha(k3,k2)*alpha(k2 + k3,k4)*beta(k1,k2 + k3 + k4) + 140*alpha(k3,k2 + k4)*alpha(k4,k2)*beta(k1,k2 + k3 + k4) + 140*alpha(k2,k3 + k4)*alpha(k4,k3)*beta(k1,k2 + k3 + k4) + 140*alpha(k2,k3)*alpha(k4,k2 + k3)*beta(k1,k2 + k3 + k4) + 140*alpha(k3,k2)*alpha(k4,k2 + k3)*beta(k1,k2 + k3 + k4) + 84*alpha(k2,k4)*alpha(k2 + k4,k3)*beta(k1,k2 + k3 + k4) + 84*alpha(k4,k2)*alpha(k2 + k4,k3)*beta(k1,k2 + k3 + k4) + 84*alpha(k3,k4)*alpha(k3 + k4,k2)*beta(k1,k2 + k3 + k4) + 84*alpha(k4,k3)*alpha(k3 + k4,k2)*beta(k1,k2 + k3 + k4) + 2160*alpha(k1,k4)*alpha(k2 + k3,k1 + k4)*beta(k2,k3) + 252*alpha(k1,k2 + k3)*alpha(k1 + k2 + k3,k4)*beta(k2,k3) + 504*alpha(k2 + k3,k1)*alpha(k1 + k2 + k3,k4)*beta(k2,k3) + 2160*alpha(k2 + k3,k1 + k4)*alpha(k4,k1)*beta(k2,k3) + 588*alpha(k1,k2 + k3)*alpha(k4,k1 + k2 + k3)*beta(k2,k3) + 1176*alpha(k2 + k3,k1)*alpha(k4,k1 + k2 + k3)*beta(k2,k3) + 648*alpha(k1,k4)*alpha(k1 + k4,k2 + k3)*beta(k2,k3) + 648*alpha(k4,k1)*alpha(k1 + k4,k2 + k3)*beta(k2,k3) + 504*alpha(k2 + k3,k4)*alpha(k2 + k3 + k4,k1)*beta(k2,k3) + 252*alpha(k4,k2 + k3)*alpha(k2 + k3 + k4,k1)*beta(k2,k3) + 2016*alpha(k1 + k2 + k3,k4)*beta(k1,k2 + k3)*beta(k2,k3) + 672*alpha(k4,k1 + k2 + k3)*beta(k1,k2 + k3)*beta(k2,k3) + 1728*alpha(k2 + k3,k1 + k4)*beta(k1,k4)*beta(k2,k3) + 1728*alpha(k1 + k4,k2 + k3)*beta(k1,k4)*beta(k2,k3) + 224*alpha(k2 + k3,k4)*beta(k1,k2 + k3 + k4)*beta(k2,k3) + 112*alpha(k4,k2 + k3)*beta(k1,k2 + k3 + k4)*beta(k2,k3) + 756*alpha(k1,k3)*alpha(k1 + k2 + k3,k4)*beta(k2,k1 + k3) + 756*alpha(k3,k1)*alpha(k1 + k2 + k3,k4)*beta(k2,k1 + k3) + 252*alpha(k1,k3)*alpha(k4,k1 + k2 + k3)*beta(k2,k1 + k3) + 252*alpha(k3,k1)*alpha(k4,k1 + k2 + k3)*beta(k2,k1 + k3) + 2016*alpha(k1 + k2 + k3,k4)*beta(k1,k3)*beta(k2,k1 + k3) + 672*alpha(k4,k1 + k2 + k3)*beta(k1,k3)*beta(k2,k1 + k3) + 588*alpha(k1,k2 + k4)*alpha(k3,k1 + k2 + k4)*beta(k2,k4) + 648*alpha(k1,k3)*alpha(k1 + k3,k2 + k4)*beta(k2,k4) + 648*alpha(k3,k1)*alpha(k1 + k3,k2 + k4)*beta(k2,k4) + 1176*alpha(k3,k1 + k2 + k4)*alpha(k2 + k4,k1)*beta(k2,k4) + 2160*alpha(k1,k3)*alpha(k2 + k4,k1 + k3)*beta(k2,k4) + 2160*alpha(k3,k1)*alpha(k2 + k4,k1 + k3)*beta(k2,k4) + 252*alpha(k1,k2 + k4)*alpha(k1 + k2 + k4,k3)*beta(k2,k4) + 504*alpha(k2 + k4,k1)*alpha(k1 + k2 + k4,k3)*beta(k2,k4) + 252*alpha(k3,k2 + k4)*alpha(k2 + k3 + k4,k1)*beta(k2,k4) + 504*alpha(k2 + k4,k3)*alpha(k2 + k3 + k4,k1)*beta(k2,k4) + 1728*alpha(k1 + k3,k2 + k4)*beta(k1,k3)*beta(k2,k4) + 1728*alpha(k2 + k4,k1 + k3)*beta(k1,k3)*beta(k2,k4) + 672*alpha(k3,k1 + k2 + k4)*beta(k1,k2 + k4)*beta(k2,k4) + 2016*alpha(k1 + k2 + k4,k3)*beta(k1,k2 + k4)*beta(k2,k4) + 112*alpha(k3,k2 + k4)*beta(k1,k2 + k3 + k4)*beta(k2,k4) + 224*alpha(k2 + k4,k3)*beta(k1,k2 + k3 + k4)*beta(k2,k4) + 252*alpha(k1,k4)*alpha(k3,k1 + k2 + k4)*beta(k2,k1 + k4) + 252*alpha(k3,k1 + k2 + k4)*alpha(k4,k1)*beta(k2,k1 + k4) + 756*alpha(k1,k4)*alpha(k1 + k2 + k4,k3)*beta(k2,k1 + k4) + 756*alpha(k4,k1)*alpha(k1 + k2 + k4,k3)*beta(k2,k1 + k4) + 672*alpha(k3,k1 + k2 + k4)*beta(k1,k4)*beta(k2,k1 + k4) + 2016*alpha(k1 + k2 + k4,k3)*beta(k1,k4)*beta(k2,k1 + k4) + 756*alpha(k3,k4)*alpha(k2 + k3 + k4,k1)*beta(k2,k3 + k4) + 756*alpha(k4,k3)*alpha(k2 + k3 + k4,k1)*beta(k2,k3 + k4) + 336*alpha(k3,k4)*beta(k1,k2 + k3 + k4)*beta(k2,k3 + k4) + 336*alpha(k4,k3)*beta(k1,k2 + k3 + k4)*beta(k2,k3 + k4) + 140*alpha(k1,k4)*alpha(k3,k1 + k4)*beta(k2,k1 + k3 + k4) + 84*alpha(k1,k3)*alpha(k1 + k3,k4)*beta(k2,k1 + k3 + k4) + 84*alpha(k3,k1)*alpha(k1 + k3,k4)*beta(k2,k1 + k3 + k4) + 140*alpha(k3,k1 + k4)*alpha(k4,k1)*beta(k2,k1 + k3 + k4) + 140*alpha(k1,k3)*alpha(k4,k1 + k3)*beta(k2,k1 + k3 + k4) + 140*alpha(k3,k1)*alpha(k4,k1 + k3)*beta(k2,k1 + k3 + k4) + 84*alpha(k1,k4)*alpha(k1 + k4,k3)*beta(k2,k1 + k3 + k4) + 84*alpha(k4,k1)*alpha(k1 + k4,k3)*beta(k2,k1 + k3 + k4) + 84*alpha(k3,k4)*alpha(k3 + k4,k1)*beta(k2,k1 + k3 + k4) + 84*alpha(k4,k3)*alpha(k3 + k4,k1)*beta(k2,k1 + k3 + k4) + 224*alpha(k1 + k3,k4)*beta(k1,k3)*beta(k2,k1 + k3 + k4) + 112*alpha(k4,k1 + k3)*beta(k1,k3)*beta(k2,k1 + k3 + k4) + 112*alpha(k3,k1 + k4)*beta(k1,k4)*beta(k2,k1 + k3 + k4) + 224*alpha(k1 + k4,k3)*beta(k1,k4)*beta(k2,k1 + k3 + k4) + 336*alpha(k3,k4)*beta(k1,k3 + k4)*beta(k2,k1 + k3 + k4) + 336*alpha(k4,k3)*beta(k1,k3 + k4)*beta(k2,k1 + k3 + k4) + 756*alpha(k1,k2)*alpha(k1 + k2 + k3,k4)*beta(k1 + k2,k3) + 756*alpha(k2,k1)*alpha(k1 + k2 + k3,k4)*beta(k1 + k2,k3) + 252*alpha(k1,k2)*alpha(k4,k1 + k2 + k3)*beta(k1 + k2,k3) + 252*alpha(k2,k1)*alpha(k4,k1 + k2 + k3)*beta(k1 + k2,k3) + 2016*alpha(k1 + k2 + k3,k4)*beta(k1,k2)*beta(k1 + k2,k3) + 672*alpha(k4,k1 + k2 + k3)*beta(k1,k2)*beta(k1 + k2,k3) + 252*alpha(k1,k2)*alpha(k3,k1 + k2 + k4)*beta(k1 + k2,k4) + 252*alpha(k2,k1)*alpha(k3,k1 + k2 + k4)*beta(k1 + k2,k4) + 756*alpha(k1,k2)*alpha(k1 + k2 + k4,k3)*beta(k1 + k2,k4) + 756*alpha(k2,k1)*alpha(k1 + k2 + k4,k3)*beta(k1 + k2,k4) + 672*alpha(k3,k1 + k2 + k4)*beta(k1,k2)*beta(k1 + k2,k4) + 2016*alpha(k1 + k2 + k4,k3)*beta(k1,k2)*beta(k1 + k2,k4) + 216*alpha(k1,k2)*alpha(k3,k4)*beta(k1 + k2,k3 + k4) + 216*alpha(k2,k1)*alpha(k3,k4)*beta(k1 + k2,k3 + k4) + 216*alpha(k1,k2)*alpha(k4,k3)*beta(k1 + k2,k3 + k4) + 216*alpha(k2,k1)*alpha(k4,k3)*beta(k1 + k2,k3 + k4) + 576*alpha(k3,k4)*beta(k1,k2)*beta(k1 + k2,k3 + k4) + 576*alpha(k4,k3)*beta(k1,k2)*beta(k1 + k2,k3 + k4) + 648*alpha(k1,k2)*alpha(k1 + k2,k3 + k4)*beta(k3,k4) + 648*alpha(k2,k1)*alpha(k1 + k2,k3 + k4)*beta(k3,k4) + 1176*alpha(k2,k1 + k3 + k4)*alpha(k3 + k4,k1)*beta(k3,k4) + 2160*alpha(k1,k2)*alpha(k3 + k4,k1 + k2)*beta(k3,k4) + 2160*alpha(k2,k1)*alpha(k3 + k4,k1 + k2)*beta(k3,k4) + 504*alpha(k3 + k4,k1)*alpha(k1 + k3 + k4,k2)*beta(k3,k4) + 252*alpha(k2,k3 + k4)*alpha(k2 + k3 + k4,k1)*beta(k3,k4) + 504*alpha(k3 + k4,k2)*alpha(k2 + k3 + k4,k1)*beta(k3,k4) + 1728*alpha(k1 + k2,k3 + k4)*beta(k1,k2)*beta(k3,k4) + 1728*alpha(k3 + k4,k1 + k2)*beta(k1,k2)*beta(k3,k4) + 672*alpha(k2,k1 + k3 + k4)*beta(k1,k3 + k4)*beta(k3,k4) + 2016*alpha(k1 + k3 + k4,k2)*beta(k1,k3 + k4)*beta(k3,k4) + 112*alpha(k2,k3 + k4)*beta(k1,k2 + k3 + k4)*beta(k3,k4) + 224*alpha(k3 + k4,k2)*beta(k1,k2 + k3 + k4)*beta(k3,k4) + 2016*alpha(k2 + k3 + k4,k1)*beta(k2,k3 + k4)*beta(k3,k4) + 896*beta(k1,k2 + k3 + k4)*beta(k2,k3 + k4)*beta(k3,k4) + 224*alpha(k3 + k4,k1)*beta(k2,k1 + k3 + k4)*beta(k3,k4) + 896*beta(k1,k3 + k4)*beta(k2,k1 + k3 + k4)*beta(k3,k4) + 576*alpha(k1,k2)*beta(k1 + k2,k3 + k4)*beta(k3,k4) + 576*alpha(k2,k1)*beta(k1 + k2,k3 + k4)*beta(k3,k4) + 1536*beta(k1,k2)*beta(k1 + k2,k3 + k4)*beta(k3,k4) + 7*alpha(k1,k3 + k4)*(21*alpha(k2,k1 + k3 + k4) + 9*alpha(k1 + k3 + k4,k2) + 4*beta(k2,k1 + k3 + k4))*(5*alpha(k3,k4) + 5*alpha(k4,k3) + 4*beta(k3,k4)) + 252*alpha(k1,k4)*alpha(k2,k1 + k3 + k4)*beta(k3,k1 + k4) + 252*alpha(k2,k1 + k3 + k4)*alpha(k4,k1)*beta(k3,k1 + k4) + 756*alpha(k1,k4)*alpha(k1 + k3 + k4,k2)*beta(k3,k1 + k4) + 756*alpha(k4,k1)*alpha(k1 + k3 + k4,k2)*beta(k3,k1 + k4) + 672*alpha(k2,k1 + k3 + k4)*beta(k1,k4)*beta(k3,k1 + k4) + 2016*alpha(k1 + k3 + k4,k2)*beta(k1,k4)*beta(k3,k1 + k4) + 336*alpha(k1,k4)*beta(k2,k1 + k3 + k4)*beta(k3,k1 + k4) + 336*alpha(k4,k1)*beta(k2,k1 + k3 + k4)*beta(k3,k1 + k4) + 896*beta(k1,k4)*beta(k2,k1 + k3 + k4)*beta(k3,k1 + k4) + 756*alpha(k2,k4)*alpha(k2 + k3 + k4,k1)*beta(k3,k2 + k4) + 756*alpha(k4,k2)*alpha(k2 + k3 + k4,k1)*beta(k3,k2 + k4) + 336*alpha(k2,k4)*beta(k1,k2 + k3 + k4)*beta(k3,k2 + k4) + 336*alpha(k4,k2)*beta(k1,k2 + k3 + k4)*beta(k3,k2 + k4) + 2016*alpha(k2 + k3 + k4,k1)*beta(k2,k4)*beta(k3,k2 + k4) + 896*beta(k1,k2 + k3 + k4)*beta(k2,k4)*beta(k3,k2 + k4) + 140*alpha(k1,k2 + k4)*alpha(k2,k4)*beta(k3,k1 + k2 + k4) + 140*alpha(k1,k4)*alpha(k2,k1 + k4)*beta(k3,k1 + k2 + k4) + 84*alpha(k1,k2)*alpha(k1 + k2,k4)*beta(k3,k1 + k2 + k4) + 84*alpha(k2,k1)*alpha(k1 + k2,k4)*beta(k3,k1 + k2 + k4) + 140*alpha(k2,k1 + k4)*alpha(k4,k1)*beta(k3,k1 + k2 + k4) + 140*alpha(k1,k2 + k4)*alpha(k4,k2)*beta(k3,k1 + k2 + k4) + 140*alpha(k1,k2)*alpha(k4,k1 + k2)*beta(k3,k1 + k2 + k4) + 140*alpha(k2,k1)*alpha(k4,k1 + k2)*beta(k3,k1 + k2 + k4) + 84*alpha(k1,k4)*alpha(k1 + k4,k2)*beta(k3,k1 + k2 + k4) + 84*alpha(k4,k1)*alpha(k1 + k4,k2)*beta(k3,k1 + k2 + k4) + 84*alpha(k2,k4)*alpha(k2 + k4,k1)*beta(k3,k1 + k2 + k4) + 84*alpha(k4,k2)*alpha(k2 + k4,k1)*beta(k3,k1 + k2 + k4) + 224*alpha(k1 + k2,k4)*beta(k1,k2)*beta(k3,k1 + k2 + k4) + 112*alpha(k4,k1 + k2)*beta(k1,k2)*beta(k3,k1 + k2 + k4) + 112*alpha(k2,k1 + k4)*beta(k1,k4)*beta(k3,k1 + k2 + k4) + 224*alpha(k1 + k4,k2)*beta(k1,k4)*beta(k3,k1 + k2 + k4) + 336*alpha(k2,k4)*beta(k1,k2 + k4)*beta(k3,k1 + k2 + k4) + 336*alpha(k4,k2)*beta(k1,k2 + k4)*beta(k3,k1 + k2 + k4) + 112*alpha(k1,k2 + k4)*beta(k2,k4)*beta(k3,k1 + k2 + k4) + 224*alpha(k2 + k4,k1)*beta(k2,k4)*beta(k3,k1 + k2 + k4) + 896*beta(k1,k2 + k4)*beta(k2,k4)*beta(k3,k1 + k2 + k4) + 336*alpha(k1,k4)*beta(k2,k1 + k4)*beta(k3,k1 + k2 + k4) + 336*alpha(k4,k1)*beta(k2,k1 + k4)*beta(k3,k1 + k2 + k4) + 896*beta(k1,k4)*beta(k2,k1 + k4)*beta(k3,k1 + k2 + k4) + 336*alpha(k1,k2)*beta(k1 + k2,k4)*beta(k3,k1 + k2 + k4) + 336*alpha(k2,k1)*beta(k1 + k2,k4)*beta(k3,k1 + k2 + k4) + 896*beta(k1,k2)*beta(k1 + k2,k4)*beta(k3,k1 + k2 + k4) + 252*alpha(k1,k3)*alpha(k2,k1 + k3 + k4)*beta(k1 + k3,k4) + 252*alpha(k2,k1 + k3 + k4)*alpha(k3,k1)*beta(k1 + k3,k4) + 756*alpha(k1,k3)*alpha(k1 + k3 + k4,k2)*beta(k1 + k3,k4) + 756*alpha(k3,k1)*alpha(k1 + k3 + k4,k2)*beta(k1 + k3,k4) + 672*alpha(k2,k1 + k3 + k4)*beta(k1,k3)*beta(k1 + k3,k4) + 2016*alpha(k1 + k3 + k4,k2)*beta(k1,k3)*beta(k1 + k3,k4) + 336*alpha(k1,k3)*beta(k2,k1 + k3 + k4)*beta(k1 + k3,k4) + 336*alpha(k3,k1)*beta(k2,k1 + k3 + k4)*beta(k1 + k3,k4) + 896*beta(k1,k3)*beta(k2,k1 + k3 + k4)*beta(k1 + k3,k4) + 216*alpha(k1,k3)*alpha(k2,k4)*beta(k1 + k3,k2 + k4) + 216*alpha(k2,k4)*alpha(k3,k1)*beta(k1 + k3,k2 + k4) + 216*alpha(k1,k3)*alpha(k4,k2)*beta(k1 + k3,k2 + k4) + 216*alpha(k3,k1)*alpha(k4,k2)*beta(k1 + k3,k2 + k4) + 576*alpha(k2,k4)*beta(k1,k3)*beta(k1 + k3,k2 + k4) + 576*alpha(k4,k2)*beta(k1,k3)*beta(k1 + k3,k2 + k4) + 576*alpha(k1,k3)*beta(k2,k4)*beta(k1 + k3,k2 + k4) + 576*alpha(k3,k1)*beta(k2,k4)*beta(k1 + k3,k2 + k4) + 1536*beta(k1,k3)*beta(k2,k4)*beta(k1 + k3,k2 + k4) + 756*alpha(k2,k3)*alpha(k2 + k3 + k4,k1)*beta(k2 + k3,k4) + 756*alpha(k3,k2)*alpha(k2 + k3 + k4,k1)*beta(k2 + k3,k4) + 336*alpha(k2,k3)*beta(k1,k2 + k3 + k4)*beta(k2 + k3,k4) + 336*alpha(k3,k2)*beta(k1,k2 + k3 + k4)*beta(k2 + k3,k4) + 2016*alpha(k2 + k3 + k4,k1)*beta(k2,k3)*beta(k2 + k3,k4) + 896*beta(k1,k2 + k3 + k4)*beta(k2,k3)*beta(k2 + k3,k4) + 21*alpha(k1,k2 + k3 + k4)*(21*alpha(k2,k3)*alpha(k2 + k3,k4) + 21*alpha(k3,k2)*alpha(k2 + k3,k4) + 35*alpha(k3,k2 + k4)*alpha(k4,k2) + 35*alpha(k2,k3)*alpha(k4,k2 + k3) + 35*alpha(k3,k2)*alpha(k4,k2 + k3) + 21*alpha(k4,k2)*alpha(k2 + k4,k3) + 21*alpha(k3,k4)*alpha(k3 + k4,k2) + 21*alpha(k4,k3)*alpha(k3 + k4,k2) + 56*alpha(k2 + k3,k4)*beta(k2,k3) + 28*alpha(k4,k2 + k3)*beta(k2,k3) + 28*alpha(k3,k2 + k4)*beta(k2,k4) + 56*alpha(k2 + k4,k3)*beta(k2,k4) + 12*alpha(k3,k4)*beta(k2,k3 + k4) + 12*alpha(k4,k3)*beta(k2,k3 + k4) + 56*alpha(k3 + k4,k2)*beta(k3,k4) + 32*beta(k2,k3 + k4)*beta(k3,k4) + 7*alpha(k2,k3 + k4)*(5*alpha(k3,k4) + 5*alpha(k4,k3) + 4*beta(k3,k4)) + 12*alpha(k4,k2)*beta(k3,k2 + k4) + 32*beta(k2,k4)*beta(k3,k2 + k4) + alpha(k2,k4)*(35*alpha(k3,k2 + k4) + 21*alpha(k2 + k4,k3) + 12*beta(k3,k2 + k4)) + 12*alpha(k2,k3)*beta(k2 + k3,k4) + 12*alpha(k3,k2)*beta(k2 + k3,k4) + 32*beta(k2,k3)*beta(k2 + k3,k4)) + 216*alpha(k1,k4)*alpha(k2,k3)*beta(k2 + k3,k1 + k4) + 216*alpha(k1,k4)*alpha(k3,k2)*beta(k2 + k3,k1 + k4) + 216*alpha(k2,k3)*alpha(k4,k1)*beta(k2 + k3,k1 + k4) + 216*alpha(k3,k2)*alpha(k4,k1)*beta(k2 + k3,k1 + k4) + 576*alpha(k2,k3)*beta(k1,k4)*beta(k2 + k3,k1 + k4) + 576*alpha(k3,k2)*beta(k1,k4)*beta(k2 + k3,k1 + k4) + 576*alpha(k1,k4)*beta(k2,k3)*beta(k2 + k3,k1 + k4) + 576*alpha(k4,k1)*beta(k2,k3)*beta(k2 + k3,k1 + k4) + 1536*beta(k1,k4)*beta(k2,k3)*beta(k2 + k3,k1 + k4) + 140*alpha(k1,k2 + k3)*alpha(k2,k3)*beta(k1 + k2 + k3,k4) + 140*alpha(k1,k3)*alpha(k2,k1 + k3)*beta(k1 + k2 + k3,k4) + 84*alpha(k1,k2)*alpha(k1 + k2,k3)*beta(k1 + k2 + k3,k4) + 84*alpha(k2,k1)*alpha(k1 + k2,k3)*beta(k1 + k2 + k3,k4) + 140*alpha(k2,k1 + k3)*alpha(k3,k1)*beta(k1 + k2 + k3,k4) + 140*alpha(k1,k2 + k3)*alpha(k3,k2)*beta(k1 + k2 + k3,k4) + 140*alpha(k1,k2)*alpha(k3,k1 + k2)*beta(k1 + k2 + k3,k4) + 140*alpha(k2,k1)*alpha(k3,k1 + k2)*beta(k1 + k2 + k3,k4) + 84*alpha(k1,k3)*alpha(k1 + k3,k2)*beta(k1 + k2 + k3,k4) + 84*alpha(k3,k1)*alpha(k1 + k3,k2)*beta(k1 + k2 + k3,k4) + 84*alpha(k2,k3)*alpha(k2 + k3,k1)*beta(k1 + k2 + k3,k4) + 84*alpha(k3,k2)*alpha(k2 + k3,k1)*beta(k1 + k2 + k3,k4) + 224*alpha(k1 + k2,k3)*beta(k1,k2)*beta(k1 + k2 + k3,k4) + 112*alpha(k3,k1 + k2)*beta(k1,k2)*beta(k1 + k2 + k3,k4) + 112*alpha(k2,k1 + k3)*beta(k1,k3)*beta(k1 + k2 + k3,k4) + 224*alpha(k1 + k3,k2)*beta(k1,k3)*beta(k1 + k2 + k3,k4) + 336*alpha(k2,k3)*beta(k1,k2 + k3)*beta(k1 + k2 + k3,k4) + 336*alpha(k3,k2)*beta(k1,k2 + k3)*beta(k1 + k2 + k3,k4) + 112*alpha(k1,k2 + k3)*beta(k2,k3)*beta(k1 + k2 + k3,k4) + 224*alpha(k2 + k3,k1)*beta(k2,k3)*beta(k1 + k2 + k3,k4) + 896*beta(k1,k2 + k3)*beta(k2,k3)*beta(k1 + k2 + k3,k4) + 336*alpha(k1,k3)*beta(k2,k1 + k3)*beta(k1 + k2 + k3,k4) + 336*alpha(k3,k1)*beta(k2,k1 + k3)*beta(k1 + k2 + k3,k4) + 896*beta(k1,k3)*beta(k2,k1 + k3)*beta(k1 + k2 + k3,k4) + 336*alpha(k1,k2)*beta(k1 + k2,k3)*beta(k1 + k2 + k3,k4) + 336*alpha(k2,k1)*beta(k1 + k2,k3)*beta(k1 + k2 + k3,k4) + 896*beta(k1,k2)*beta(k1 + k2,k3)*beta(k1 + k2 + k3,k4))/232848.



#Wrappers for CDM mode coupling functions s.t. they have signatures that work for bispectrum code
@njit(cache = True)
def F2s_bispectrum(k1, k2, s1, *args):
  return F2s(k1, k2)


@njit(cache = True)
def F3s_bispectrum(k1, k2, k3, s1, s2, *args):
  return F3s(k1, k2, k3)

@njit(cache = True)
def F4s_bispectrum(k1, k2, k3, k4, s1, s2, s3, *args):
  return F4s(k1, k2, k3, k4)